diff --git a/source/is/mjuk/cache/Controller.java b/source/is/mjuk/cache/Controller.java
index d31dc02..6aed3d5 100644
--- a/source/is/mjuk/cache/Controller.java
+++ b/source/is/mjuk/cache/Controller.java
@@ -6,6 +6,7 @@ public class Controller
     private CacheLayout cacheLayout;
     private DataCache dataCache;
     private AddressLayout addressLayout;
+    private Storage store = Storage.getStorage();
 
     public Controller() {
         user = new User();
@@ -29,7 +30,11 @@ public class Controller
             return rv;
         }
 
-        return instruction.executeInstruction();
+        InstructionDTO instructionDTO = instruction.executeInstruction();
+
+        store.addInstructionDTO(instructionDTO);
+
+        return instructionDTO;
     };
 
     /**
@@ -65,6 +70,7 @@ public class Controller
         cacheLayout = new CacheLayout(blockSize, blockCount, associativity);
         addressLayout = cacheLayout.getAddressLayout();
         dataCache = cacheLayout.getDataCache();
+        store.storeLayoutDTO(this.cacheLayout.generateLayoutDTO());
     }
 
     public String displayCache() {
@@ -82,12 +88,14 @@ public class Controller
     }
 
     public SimulationDTO getSimulationData(){
-        SimulationDTO simDTO = new SimulationDTO();
-        simDTO.setUser(this.user);
-        simDTO.setHitRate(this.dataCache.getHitrate());
+        store.storeHitrate(this.dataCache.getHitrate());
+        store.storeNickname(this.user.getNickname());
+        store.storeDateTime(this.user.getDateTime());
+        store.storeLayoutDTO(this.cacheLayout.generateLayoutDTO());
+
+        SimulationDTO simDTO = store.createDTO();
         simDTO.setStores(this.dataCache.getStores());
         simDTO.setLoads(this.dataCache.getLoads());
-        simDTO.setLayoutDTO(this.cacheLayout.generateLayoutDTO());
         return simDTO;
     }
 }
diff --git a/source/is/mjuk/cache/Storage.java b/source/is/mjuk/cache/Storage.java
new file mode 100644
index 0000000..e5002be
--- /dev/null
+++ b/source/is/mjuk/cache/Storage.java
@@ -0,0 +1,131 @@
+package is.mjuk.cache;
+
+import java.util.ArrayList;
+import java.util.Date;
+
+/**
+ * Templete for storage of data
+ * <p>
+ * Stores different variables for logging and
+ * storage to database or likewise.
+ * @author  Emil Tullstedt <emiltu@kth.se>
+ */
+public class Storage {
+    private static final Storage storage = new Storage();
+    private ArrayList<InstructionDTO> instructionStore;
+    private LayoutDTO layoutStore;
+    private String nickname;
+    private Date datetime;
+    private double hitrate;
+
+    private Storage() {
+        this.instructionStore = new ArrayList<InstructionDTO>();
+    }
+
+    /**
+     * Gets the saved storage
+     */
+    public static Storage getStorage() {
+        return storage;
+    }
+
+    /**
+     * Adds an {@link is.mjuk.cache.InstructionDTO} to the
+     * list of instructions.
+     *
+     * @param instruction {@link is.mjuk.cache.InstructionDTO} to be stored.
+     */
+    public void addInstructionDTO (InstructionDTO instruction) {
+        this.instructionStore.add(instruction);
+    }
+
+    /**
+     * Get one {@link is.mjuk.cache.InstructionDTO} from the
+     * list of saved InstructionDTOs.
+     *
+     * @param count The index of the DTO to be retrived
+     */
+    public InstructionDTO getInstructionDTO (int count) {
+        return instructionStore.get(count);
+    }
+
+    /**
+     * Sets the {@link is.mjuk.cache.LayoutDTO} of the data
+     *
+     * @param layout {@link is.mjuk.cache.LayoutDTO} to be stored.
+     */
+    public void storeLayoutDTO(LayoutDTO layout) {
+        this.layoutStore = layout;
+    }
+
+    /**
+     * Get the saved {@link is.mjuk.cache.LayoutDTO}
+     */
+    public LayoutDTO getLayoutDTO() {
+        return this.layoutStore;
+    }
+
+    /**
+     * Set the date to store
+     *
+     * @param satetime The date to set to
+     */
+    public void storeDateTime(Date datetime) {
+        this.datetime = datetime;
+    }
+
+    /**
+     * Get the stored Date
+     */
+    public Date getDateTime() {
+        return this.datetime;
+    }
+
+    /**
+     * Set hitrate to store
+     *
+     * @param hitrate The hitrate to store
+     */
+    public void storeHitrate(double hitrate) {
+        this.hitrate = hitrate;
+    }
+
+    /**
+     * Get the stored date
+     */
+    public double getHitrate() {
+        return this.hitrate;
+    }
+
+    /**
+     * Set nickname to store
+     */
+    public void storeNickname(String nickname) {
+        this.nickname = nickname;
+    }
+
+    /**
+     * Get the stored nickname
+     */
+    public String getNickname() {
+        return this.nickname;
+    }
+
+    /**
+     * Creates a {@link is.mjuk.cache.SimulationDTO} from all saved data
+     */
+    public SimulationDTO createDTO() {
+        return new SimulationDTO (hitrate, nickname, datetime, layoutStore);
+    }
+
+    /**
+     * Reset all variables to emty instances 
+     */
+    public void clean() {
+        instructionStore = new ArrayList<InstructionDTO>();
+        layoutStore = new LayoutDTO();
+        datetime = new Date();
+        nickname = new String();
+        hitrate = Double.NaN;
+    }
+}
diff --git a/test/is/mjuk/cache/StorageTest.java b/test/is/mjuk/cache/StorageTest.java
new file mode 100644
index 0000000..e71b023
--- /dev/null
+++ b/test/is/mjuk/cache/StorageTest.java
@@ -0,0 +1,122 @@
+package is.mjuk.cache;
+
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertEquals;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+public class StorageTest {
+    Storage store = Storage.getStorage();
+
+    @Test
+    public void addInstructionDTO() {
+        store.clean();
+
+        CacheLayout cacheLayout = new CacheLayout(16, 16, 1);
+        DataCache dataCache = cacheLayout.getDataCache();
+        AddressLayout addressLayout = cacheLayout.getAddressLayout();
+
+        Instruction instruction = new Instruction(dataCache, addressLayout,
+            InstructionType.LOAD, 0xABAD1DEA);
+        InstructionDTO instructionDTO = instruction.executeInstruction();
+        store.addInstructionDTO(instructionDTO);
+        assertFalse(store.getInstructionDTO(0).getHit());
+
+        instruction = new Instruction(dataCache, addressLayout,
+            InstructionType.LOAD, 0xABAD1DEA);
+        instructionDTO = instruction.executeInstruction();
+        store.addInstructionDTO(instructionDTO);
+        assertTrue(store.getInstructionDTO(1).getHit());
+
+        store.clean();
+    }
+
+    @Test
+    public void clean() {
+        store.clean();
+
+        CacheLayout cacheLayout = new CacheLayout(16, 16, 1);
+        DataCache dataCache = cacheLayout.getDataCache();
+        AddressLayout addressLayout = cacheLayout.getAddressLayout();
+
+        Instruction instruction = new Instruction(dataCache, addressLayout,
+            InstructionType.LOAD, 0xABAD1DEA);
+        InstructionDTO instructionDTO = instruction.executeInstruction();
+        store.addInstructionDTO(instructionDTO);
+        assertEquals("The type of the instruction saved should be LOAD",
+            InstructionType.LOAD, store.getInstructionDTO(0).getType());
+
+        store.clean();
+
+        instruction = new Instruction(dataCache, addressLayout,
+            InstructionType.STORE, 0xABAD1DEA);
+        instructionDTO = instruction.executeInstruction();
+        store.addInstructionDTO(instructionDTO);
+        assertEquals("The type of the instruction saved should be STORE",
+            InstructionType.STORE, store.getInstructionDTO(0).getType());
+
+        store.clean();
+    }
+
+    @Test
+    public void storeLayout() {
+        CacheLayout cacheLayout = new CacheLayout(8, 4, 2);
+
+        store.storeLayoutDTO(cacheLayout.generateLayoutDTO());
+
+        LayoutDTO layoutDTO = store.getLayoutDTO();
+
+        assertEquals("BlockSize should be 8", 8, layoutDTO.getBlockSize());
+        assertEquals("Index should be 2", 2, layoutDTO.getIndexSize());
+    }
+
+    @Test
+    public void storeDateTime() {
+        User u = new User();
+
+        store.storeDateTime(u.getDateTime());
+        assertEquals("Date in Storage should be same as date from user",
+            u.getDateTime(), store.getDateTime());
+
+        u.updateDateTime(1234567890000L);
+        store.storeDateTime(u.getDateTime());
+        assertEquals("Date in storage should be same as date from user",
+            u.getDateTime(), store.getDateTime());
+    }
+
+    @Test
+    public void storeHitrate() {
+        CacheLayout cacheLayout = new CacheLayout(16, 16, 1);
+        DataCache dataCache = cacheLayout.getDataCache();
+        AddressLayout addressLayout = cacheLayout.getAddressLayout();
+
+        store.storeHitrate(dataCache.getHitrate());
+        assertEquals("Stored hitrate should be same as in the datacache",
+            dataCache.getHitrate(), store.getHitrate(), 0.01);
+
+        dataCache.loadData(addressLayout.parseAddress(0xABAD1DEA));
+        dataCache.loadData(addressLayout.parseAddress(0xABAD1DEA));
+        dataCache.storeData(addressLayout.parseAddress(0xABAD1DEA));
+        dataCache.storeData(addressLayout.parseAddress(0xABAD1DCA));
+        dataCache.storeData(addressLayout.parseAddress(0xAAAABBEA));
+        dataCache.loadData(addressLayout.parseAddress(0xABAD1DEA));
+
+        store.storeHitrate(dataCache.getHitrate());
+        assertEquals("Stored hitrate should be same as in the datacache",
+            dataCache.getHitrate(), store.getHitrate(), 0.01);
+    }
+
+    @Test
+    public void storeNickname() {
+        User u = new User();
+        u.setNickname("Huxley");
+
+        store.storeNickname(u.getNickname());
+        assertEquals("Name in storage should be same as name in user object",
+            u.getNickname(), store.getNickname());
+    }
+
+}
\ No newline at end of file
diff --git a/test/is/mjuk/cache/TestMain.java b/test/is/mjuk/cache/TestMain.java
index 6b3804f..410b21e 100644
--- a/test/is/mjuk/cache/TestMain.java
+++ b/test/is/mjuk/cache/TestMain.java
@@ -8,7 +8,8 @@ import org.junit.runners.Suite.SuiteClasses;
 @RunWith(Suite.class)
 @SuiteClasses({ 
     CacheLayoutTest.class,
-    DataCacheTest.class 
+    DataCacheTest.class,
+    StorageTest.class
 })
 public class TestMain {
     // Intentionally left empty
